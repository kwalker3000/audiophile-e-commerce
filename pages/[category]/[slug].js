import { useEffect, useState } from 'react'
import Head from 'next/head'
import dynamic from 'next/dynamic'
import { useRouter } from 'next/router'

import styles from '../../styles/modules/Product.module.css'

import { MongoClient } from 'mongodb'

import { Header } from '../../src/components/Header/Header'
import { NavBack } from '../../src/components/NavBack'
import { ProductOvView } from '../../src/components/Product/ProductOvView'
import { ProductContent } from '../../src/components/Product/ProductContent'
import { ProductGallery } from '../../src/components/Product/ProductGallery'
import { Recommend } from '../../src/components/Product/Recommend'
import { Menu } from '../../src/components/Menu/Menu'
import { About } from '../../src/components/About'
import { Footer } from '../../src/components/Footer/Footer'

import { useAppContext } from '../../src/context/appContext'
import { ChatIcon } from '../src/components/Ably/ChatIcon'
const AblyChatComponent = dynamic(
  () => import('../src/components/Ably/AblyChatComponent'),
  { ssr: false }
)

export default function Product({ data, user }) {
  const [isCartUpdate, setIsCartUpdate] = useState(false)
  const [isOpenChat, setIsOpenChat] = useState(false)

  let toggleChat = () => {
    setIsOpenChat(!isOpenChat)
  }

  let { cart } = useAppContext()

  let renderCart = () => {
    setIsCartUpdate(!isCartUpdate)
  }

  const router = useRouter()
  const { category, slug } = router.query

  let product = data.find((product) => product.slug == slug)

  return (
    <div className={styles.page}>
      <Head>
        <title>{product.name} | Audiophile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.pageHeader}>
        <Header isCartUpdate={isCartUpdate} renderCart={renderCart} user={user}/>
      </header>

      <main className={`${styles.pageMain} ${styles.main}`}>
            <div className={`${styles.mainChat}`} >
	      {isOpenChat && <AblyChatComponent />}
            </div>
            <div className={`${styles.chatButton}`} onClick={toggleChat} aria-label={`${isOpenChat ? 'close chat' : 'open chat'}`}>
              <ChatIcon isOpenChat={isOpenChat}/>
            </div>

        <section className={styles.mainNavBack}>
          <NavBack />
        </section>

        <section className={styles.mainProdOvView}>
          <ProductOvView product={product} renderCart={renderCart} />
        </section>
        <section className={styles.mainProdContent}>
          <ProductContent
            features={product.features}
            includes={product.includes}
          />
        </section>
        <section className={styles.mainProdGallery}>
          <ProductGallery gallery={product.gallery} />
        </section>

        <section className={styles.mainRecommend}>
          <Recommend recommend={product.others} />
        </section>
        <section className={styles.mainMenu}>
          <Menu />
        </section>
        <section className={styles.mainAbout}>
          <About />
        </section>
      </main>

      <footer className={styles.pageFooter}>
        <Footer />
      </footer>
    </div>
  )
}

export const getServerSideProps = async (ctx) => {
    let { authOptions } = require('../api/auth/[...nextauth]');
    let { unstable_getServerSession } = require('next-auth/next');

    let session = await unstable_getServerSession(ctx.req, ctx.res, authOptions);

    let user = session === null ? {} : session.user
    user.id = user.id === undefined ? null : user.id
    user.name = user.name === undefined ? null : user.name
    user.image = user.image === undefined ? null : user.image

  const client = await MongoClient.connect(process.env.MONGODB_URI)

  const db = client.db('audiophile')

  const yourCollection = db.collection('product')

  let cursor = await yourCollection.find()
  let data = []

  await cursor.forEach((entry) => {
    entry._id = entry._id.toString()
    data.push(entry)
  })

  cursor.close()

  return {
    props: {
      data,
      user: {
	id: user.id,
	name: user.name,
	img: user.image
      }

    },
  }
}
