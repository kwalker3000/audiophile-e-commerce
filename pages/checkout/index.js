import React from 'react'
import Head from 'next/head'

import styles from '../../styles/modules/Checkout.module.css'

import Stripe from 'stripe'
import { loadStripe } from '@stripe/stripe-js'
import { Elements } from '@stripe/react-stripe-js'
import { appearance } from '../../lib/appearance'

import { useAppContext } from '../../src/context/appContext'
import { useSession } from 'next-auth/react'

import { Stepper } from '../../src/components/Checkout/Stepper'
import { CheckoutSummary } from '../../src/components/Checkout/CheckoutSummary'
import CheckoutForm from '../../src/components/Checkout/CheckoutForm'
import { Footer } from '../../src/components/Footer/Footer'
import { CheckoutHeader } from '../../src/components/Checkout/CheckoutHeader'

import { updateOrder } from '../../lib/updateOrder'
import { parseCookies, setCookie, destroyCookie} from 'nookies'

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,
  {
    betas: ['process_order_beta_1'],
    apiVersion: '2020-08-27; orders_beta=v4',
  }
)

export default function CheckoutPage({ prices }) {
  const [clientSecret, setClientSecret] = React.useState('')
  const [order, setOrder] = React.useState()

    let { data: userData } = useSession();
  let { data } = prices
  let { cart, address, invoice } = useAppContext()
  let cartCheckout = []

  cart.forEach((item) => {
    let product = data.find(
      (stripe) => stripe.product.default_price == item.stripe_id
    )
    cartCheckout.push({
      quantity: item.quantity,
      price_data: {
        currency: 'usd',
        unit_amount: item.price * 100,
        tax_behavior: 'exclusive',
        product: product.product.id,
      },
    })
  })

  React.useEffect(() => {


	let getCustomer = async () => {

	    let res = await fetch('/api/create-customer', {
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify({ address }),
	    })

	    if (res.ok) {
		let data = await res.json();
		return data.customer.id;
	    }
	    else {
		throw new Error(res.status);
	    }

	}

      if (userData) {

	let getOrder = async (customer) => {

	    let res = await fetch('/api/create-order', {
	    method: 'POST',
	    headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify(
		    {
			items: cartCheckout,
			address,
			invoice,
			customer
		    }),
	    })

	    if (res.ok) {
		let data = await res.json();
		updateOrder(userData.user.id, data.order)
		setOrder(data.order);
		setClientSecret(data.clientSecret);
	    }
	    else {
		throw new Error(res.status);
	    }

	}

	getCustomer().then(customer => getOrder(customer))

      }

      else {
	let getOrder = async (customer = null) => {
            
          let res = await fetch('/api/create-order', {
	    method: 'POST',
	    headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify(
		    {
			items: cartCheckout,
			address,
			invoice,
			customer
		    }),
	    })

	    if (res.ok) {

		let data = await res.json();
		setOrder(data.order);
		setClientSecret(data.clientSecret);

		const cookies = parseCookies()
		let { guest } = cookies
                guest = JSON.parse(guest)
                guest['stripeOrderId'] = data.order.id 
                guest['total'] = data.order.amount_total
                guest = JSON.stringify(guest)
                setCookie(null, 'guest', guest, {
                    maxAge: 24 * 60 * 80,
                    path: '/',
                })
	    }
	    else {
		throw new Error(res.status);
	    }
        }
          getCustomer().then(customer => getOrder(customer))
      }
      
  }, [])

  const options = {
    clientSecret,
    appearance,
    fonts: [
      {
        cssSrc:
          'https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;700&display=swap',
      },
    ],
  }

  return (
    <div className={styles.page} >
      <Head>
        <title>Checkout | Audiophile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {clientSecret && (
        <Elements options={options} stripe={stripePromise}>
          <header className={styles.pageHeader}>
            <CheckoutHeader />
          </header>
	  <main className={styles.main}>
            <div className={`${styles.mainGrid} ${styles.grid}`}>
		<section className={styles.gridStepper}>
		    <Stepper />
		</section>

		<section className={styles.gridSummary}>
		    <CheckoutSummary cart={cart} order={order} />
		</section>

	      <section className={styles.gridForm}>
		    <CheckoutForm email={address.email} order={order} />
		</section>
	    </div>
	</main>
          <footer className={styles.pageFooter}>
            <Footer />
          </footer>
        </Elements>
      )}
    </div>
  )
}

export async function getServerSideProps(ctx) {
    let { authOptions } = require('../api/auth/[...nextauth]');
    let { unstable_getServerSession } = require('next-auth/next');

    let session = await unstable_getServerSession(ctx.req, ctx.res, authOptions);

    let user = session === null ? {} : session.user
    user.id = user.id === undefined ? null : user.id
    user.name = user.name === undefined ? null : user.name
    user.image = user.image === undefined ? null : user.image

  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY)

  const prices = await stripe.prices.list({
    active: true,
    expand: ['data.product'],
  })

  return {
    props: {
      prices,
    },
  }
}
