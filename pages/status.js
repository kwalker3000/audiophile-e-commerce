import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import dynamic from 'next/dynamic'

import { loadStripe } from '@stripe/stripe-js'
import { Elements, useStripe } from '@stripe/react-stripe-js'

import { finalizeOrder } from '../lib/finalizeOrder'
import { createGuestOrderLog } from '../lib/createGuestOrderLog'

import styles from '../styles/modules/Status.module.css'

import { Header } from '../src/components/Header/Header'
import { Stepper } from '../src/components/Checkout/Stepper'
import { Footer } from '../src/components/Footer/Footer'

import { Map } from '../src/components/Success/Map'
import { MapOverlay } from '../src/components/Success/MapOverlay'
import { OrderReview } from '../src/components/Success/OrderReview'
import { DeliverySum } from '../src/components/Success/DeliverySum'
import { Overlay } from '../src/components/Overlay'

import { useAppContext } from '../src/context/appContext'

import { parseCookies, setCookie, destroyCookie } from 'nookies'
import { ChatIcon } from '../src/components/Ably/ChatIcon'
const AblyChatComponent = dynamic(
  () => import('../src/components/Ably/AblyChatComponent'),
  { ssr: false }
)
// Make sure to call loadStripe outside of a componentâ€™s render to avoid
// recreating the Stripe object on every render.
// This is your test publishable API key.
const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,
  {
    betas: ['process_order_beta_1'],
    apiVersion: '2020-08-27; orders_beta=v4',
  }
)

let img = '../public/assets/map/map-marker.png'

export default function OrderStatusPage({ token, store, user, total }) {
  const router = useRouter()
  let { address, emptyCart, setAction, cart } = useAppContext()

  const [isLoading, setIsLoading] = useState(true)
  const [hasPopOver, setHasPopOver] = useState(true)
  const [userData, setUserData] = useState({
    name: user.name,
    contact: {
      phone: user.contact.phone,
      email: user.contact.email,
    },
    address: {
      city: user.address.city,
      country: user.address.country,
      line1: user.address.line1,
      line2: user.address.line2,
      postal_code: user.address.postal_code,
      state: user.address.state,
    },
    coord: {
      lon: user.coord.lon,
      lat: user.coord.lat,
    },
  })
  const [amount, setAmount] = useState(total)
  const [storeData, setStoreData] = useState({
    id: null,
    country_code: '',
    postal_code: '',
    city: '',
    lat: null,
    lon: null,
  })
  const [isOpenChat, setIsOpenChat] = useState(false)

  let toggleChat = () => {
    setIsOpenChat(!isOpenChat)
  }

  let removeOverlay = () => {
    setIsLoading(false)
  }

  let handlePopOver = () => {
    setHasPopOver(false)
    emptyCart()
  }

  useEffect(() => {
    // store will be set to 0 if user is 'guest'
    try {
      if (store == 0) {
        let cookies = parseCookies()
        let { guest } = cookies
        guest = JSON.parse(guest)

        let getShippingData = async (guest) => {
          let data = await createGuestOrderLog(guest)
          return data
        }

        getShippingData(guest).then((res) => {
          let { storeInfo, order } = res
          setStoreData(storeInfo)
          setUserData((prevData) => ({
            ...prevData,
            address: {
              city: order.shipping_details.address.city,
              country: order.shipping_details.address.country,
              line1: order.shipping_details.address.line1,
              line2: order.shipping_details.address.line2,
              postal_code: order.shipping_details.address.postal_code,
              state: order.billing_details.address.state,
            },
            coord: {
              lon: guest.coord.lon,
              lat: guest.coord.lat,
            },
            name: order.shipping_details.name,
            contact: {
              phone: order.billing_details.phone,
              email: order.billing_details.email,
            },
          }))
          setAmount(order.amount_total)
        })
      } else {
        setStoreData(store)
      }
      setTimeout(() => {
        destroyCookie(null, 'guest', { path: '/' })
        destroyCookie(null, 'shoppingCart', { path: '/' })
      }, 500)
    } catch (err) {
      console.error(err)
      router.push('/')
    }
  }, [])

  return (
    <div className={styles.page}>
      <Head>
        <title>Checkout | Audiophile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Elements stripe={stripePromise}>
        <header className={styles.pageHeader}>
          <Header user={user} />
        </header>

        <main className={styles.main}>
          <div className={`${styles.mainChat}`}>
            {isOpenChat && <AblyChatComponent />}
          </div>
          <div
            className={`${styles.chatButton}`}
            onClick={toggleChat}
            aria-label={`${isOpenChat ? 'close chat' : 'open chat'}`}
          >
            <ChatIcon isOpenChat={isOpenChat} />
          </div>

          <Overlay hasPopOver={hasPopOver} />
          <div className={`${styles.mainGrid} ${styles.grid}`}>
            <section className={styles.gridDetails}>
              <DeliverySum userData={userData} cart={cart} />
            </section>

            <section className={styles.gridBar}>
              <div></div>
            </section>

            <section
              className={styles.gridMap}
              style={{
                position: 'relative',
                /* width: '400px', */
                height: '400px',
              }}
            >
              {hasPopOver && (
                <div className={styles.orderReview}>
                  <OrderReview
                    handlePopOver={handlePopOver}
                    total={amount}
                    cart={cart}
                  />
                </div>
              )}
              {userData.coord.lon && (
                <Map
                  token={token}
                  store={storeData}
                  user={userData}
                  removeOverlay={removeOverlay}
                />
              )}
              <OrderStatus />
            </section>
          </div>
        </main>

        <footer className={styles.pageFooter}>
          <Footer />
        </footer>
      </Elements>
    </div>
  )
}

export async function getServerSideProps(ctx) {
  const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY, {
    apiVersion: '2020-08-27; orders_beta=v4',
  })

  let { authOptions } = require('./api/auth/[...nextauth]')
  let { unstable_getServerSession } = require('next-auth/next')

  let session = await unstable_getServerSession(ctx.req, ctx.res, authOptions)

  let user = session === null ? {} : session.user
  user.id = user.id === undefined ? null : user.id
  user.name = user.name === undefined ? null : user.name
  user.image = user.image === undefined ? null : user.image

  let token = process.env.MAPBOX_TOKEN

  let getData = async () => {
    if (session) {
      let data = await finalizeOrder(session.user.id)
      let { store, orderLog } = data

      let order = await stripe.orders.retrieve(orderLog.stripe_order, {
        expand: ['line_items'],
      })

      return { store, order, orderLog }
    } else {
      let store = 0
      let orderLog = {
        lon: 0,
        lat: 0,
      }
      let order = {
        shipping_details: {
          name: '',
          address: {
            city: '',
            country: '',
            line1: '',
            line2: '',
            postal_code: '',
          },
        },
        amount_total: 0,
        billing_details: {
          phone: '',
          email: '',
          address: {
            state: '',
          },
        },
      }

      return { store, order, orderLog }
    }
  }

  let { store, order, orderLog } = await getData()

  return {
    props: {
      token,
      store,
      total: order.amount_total,
      user: {
        id: user.id,
        img: user.image,
        username: user.name,
        name: order.shipping_details.name,
        contact: {
          phone: order.billing_details.phone,
          email: order.billing_details.email,
        },
        address: {
          city: order.shipping_details.address.city,
          country: order.shipping_details.address.country,
          line1: order.shipping_details.address.line1,
          line2: order.shipping_details.address.line2,
          postal_code: order.shipping_details.address.postal_code,
          state: order.billing_details.address.state,
        },
        coord: {
          lon: orderLog.lon,
          lat: orderLog.lat,
        },
      },
    },
  }
}

function OrderStatus() {
  let { emptyCart } = useAppContext()
  const stripe = useStripe()
  const [message, setMessage] = useState(null)
  useEffect(() => {
    ;(async () => {
      if (!stripe) {
        return
      }

      const clientSecret = new URLSearchParams(window.location.search).get(
        'order_client_secret'
      )

      stripe.retrieveOrder(clientSecret).then(({ order }) => {
        switch (order.payment.payment_intent.status) {
          case 'succeeded':
            // TODO order_id and product_id associative table
            setMessage('Payment succeeded!')
            break
          case 'processing':
            setMessage('Your payment is processing.')
            break
          case 'requires_payment_method':
            setMessage('Your payment was not successful, please try again.')
            break
          default:
            setMessage('Something went wrong.')
            break
        }
      })
    })()
  }, [stripe])

  return (
    <>
      {/* Show any error or success messages */}
      {message && <div id="payment-message">{message}</div>}
    </>
  )
}
