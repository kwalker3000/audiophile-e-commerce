import { useEffect, useState } from 'react'
import { useAppContext } from '../src/context/appContext'
import Head from 'next/head'
import dynamic from 'next/dynamic'
import styles from '../styles/modules/Category.module.css'

import { Headline } from '../src/components/Headline'
import { Header } from '../src/components/Header/Header'
import { OrderTable } from '../src/components/Orders/OrderTable'
import { About } from '../src/components/About'
import { Footer } from '../src/components/Footer/Footer'

import { ChatIcon } from '../src/components/Ably/ChatIcon'
const AblyChatComponent = dynamic(
  () => import('../src/components/Ably/AblyChatComponent'),
  { ssr: false }
)
export default function Orders({ user, orders }) {

  const [isOpenChat, setIsOpenChat] = useState(false)

  let toggleChat = () => {
    setIsOpenChat(!isOpenChat)
  }

  return (
    <div className={styles.page}>
      <Head>
        <title>Orders | Audiophile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.pageHeader}>
        <Header user={user}/>
      </header>
      <main className={`${styles.pageMain} ${styles.main}`}>
            <div className={`${styles.mainChat}`} >
	      {isOpenChat && <AblyChatComponent />}
            </div>
            <div className={`${styles.chatButton}`} onClick={toggleChat} aria-label={`${isOpenChat ? 'close chat' : 'open chat'}`}>
              <ChatIcon isOpenChat={isOpenChat}/>
            </div>


        <section className={styles.mainHeadline}>
          <Headline title="orders" />
        </section>
        <section className={`${styles.ProductQkView} ${styles.mainQkView}`}>
          <OrderTable orders={orders}/>
        </section>
        {/* <section className={styles.mainMenu}> */}
        {/*   <Menu /> */}
        {/* </section> */}
        <section className={styles.mainAbout}>
          <About />
        </section>
      </main>
      <footer className={styles.pageFooter}>
        <Footer />
      </footer>
    </div>
  )
}

export const getServerSideProps = async (ctx) => {
    let { db } = require('../lib/database')
    let { authOptions } = require('./api/auth/[...nextauth]');
    let { unstable_getServerSession } = require('next-auth/next');

    let session = await unstable_getServerSession(ctx.req, ctx.res, authOptions);

    let user = session === null ? {} : session.user
    user.id = user.id === undefined ? null : user.id
    user.name = user.name === undefined ? null : user.name
    user.image = user.image === undefined ? null : user.image

    let results;
    try {
        results = await db.any('SELECT id, stripe_order, amount, created FROM orders WHERE user_id = $1 ORDER BY created DESC LIMIT 5', user.id)
    }
    catch (err) {
        console.error(err)
    }

    let orders = results
    orders.forEach(order => order.created = String(order.created))

  return {
    props: {
        orders,
      user: {
	id: user.id,
	name: user.name,
	img: user.image
      }

    },
  }
}
